const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const cors = require('cors');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// L∆∞u tr·ªØ th√¥ng tin ph√≤ng v√† ng∆∞·ªùi d√πng
const rooms = new Map();
const users = new Map(); // socketId -> user info
const privateMessages = new Map(); // userId -> messages

// Admin configuration
const ADMIN_PASSWORD = 'admin123'; // C√≥ th·ªÉ thay ƒë·ªïi

// Route ch√≠nh
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Socket.IO x·ª≠ l√Ω k·∫øt n·ªëi
io.on('connection', (socket) => {
  console.log('Ng∆∞·ªùi d√πng k·∫øt n·ªëi:', socket.id);

  // Tham gia ph√≤ng
  socket.on('join-room', (data) => {
    const { roomId, username, adminPassword } = data;
    socket.join(roomId);
    socket.username = username;
    socket.roomId = roomId;
    
    // Ki·ªÉm tra quy·ªÅn admin
    socket.isAdmin = adminPassword === ADMIN_PASSWORD;

    // L∆∞u th√¥ng tin user
    users.set(socket.id, {
      id: socket.id,
      username: username,
      roomId: roomId,
      joinTime: Date.now()
    });

    // Kh·ªüi t·∫°o ph√≤ng n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!rooms.has(roomId)) {
      rooms.set(roomId, {
        users: new Map(),
        currentVideo: null,
        videoState: {
          isPlaying: false,
          currentTime: 0,
          lastUpdate: Date.now()
        },
        videoQueue: [], // H√†ng ƒë·ª£i video
        adminId: null, // ID c·ªßa admin hi·ªán t·∫°i
        isLiveMode: false // Ch·∫ø ƒë·ªô ph√°t tr·ª±c ti·∫øp
      });
    }

    const room = rooms.get(roomId);
    room.users.set(socket.id, {
      id: socket.id,
      username: username,
      joinTime: Date.now(),
      isAdmin: socket.isAdmin
    });

    // ƒê·∫∑t admin ƒë·∫ßu ti√™n
    if (socket.isAdmin && !room.adminId) {
      room.adminId = socket.id;
      room.isLiveMode = true;
    }

    // G·ª≠i th√¥ng tin video hi·ªán t·∫°i cho ng∆∞·ªùi d√πng m·ªõi
    if (room.currentVideo) {
      socket.emit('video-loaded', {
        videoId: room.currentVideo,
        state: room.videoState
      });
    }

    // Th√¥ng b√°o ng∆∞·ªùi d√πng tham gia
    const joinMessage = socket.isAdmin ? 
      `üëë Admin ${username} ƒë√£ tham gia ph√≤ng` : 
      `${username} ƒë√£ tham gia ph√≤ng`;
    
    socket.to(roomId).emit('user-joined', {
      username: socket.isAdmin ? `üëë ${username}` : username,
      message: joinMessage
    });

    // G·ª≠i th√¥ng tin ph√≤ng cho user m·ªõi
    socket.emit('room-info', {
      isAdmin: socket.isAdmin,
      adminId: room.adminId,
      isLiveMode: room.isLiveMode,
      videoQueue: room.videoQueue
    });

    // G·ª≠i danh s√°ch ng∆∞·ªùi d√πng online
    const usersList = Array.from(room.users.values());
    io.to(roomId).emit('users-list', usersList);
    io.to(roomId).emit('user-count', room.users.size);
    io.to(roomId).emit('admin-status', {
      adminId: room.adminId,
      isLiveMode: room.isLiveMode
    });

    console.log(`${socket.isAdmin ? 'üëë Admin' : ''} ${username} tham gia ph√≤ng ${roomId}`);
  });

  // X·ª≠ l√Ω tin nh·∫Øn chat
  socket.on('chat-message', (data) => {
    const { message, roomId, messageType = 'text' } = data;
    const chatData = {
      id: Date.now() + Math.random(),
      username: socket.username,
      message: message,
      messageType: messageType,
      timestamp: new Date().toLocaleTimeString('vi-VN'),
      userId: socket.id
    };
    
    io.to(roomId).emit('chat-message', chatData);
    console.log(`Chat trong ph√≤ng ${roomId}: ${socket.username}: ${message}`);
  });

  // X·ª≠ l√Ω tin nh·∫Øn ri√™ng
  socket.on('private-message', (data) => {
    const { message, targetUserId, roomId } = data;
    const targetSocket = io.sockets.sockets.get(targetUserId);
    
    if (targetSocket) {
      const pmData = {
        id: Date.now() + Math.random(),
        from: socket.username,
        fromId: socket.id,
        message: message,
        timestamp: new Date().toLocaleTimeString('vi-VN'),
        isPrivate: true
      };
      
      // G·ª≠i cho ng∆∞·ªùi nh·∫≠n
      targetSocket.emit('private-message', pmData);
      // G·ª≠i l·∫°i cho ng∆∞·ªùi g·ª≠i ƒë·ªÉ hi·ªÉn th·ªã
      socket.emit('private-message', {
        ...pmData,
        to: targetSocket.username,
        toId: targetUserId
      });
      
      console.log(`Private message: ${socket.username} -> ${targetSocket.username}: ${message}`);
    }
  });

  // X·ª≠ l√Ω file sharing
  socket.on('file-share', (data) => {
    const { fileData, fileName, fileSize, fileType, roomId } = data;
    
    const fileMessage = {
      id: Date.now() + Math.random(),
      username: socket.username,
      messageType: 'file',
      fileData: {
        name: fileName,
        size: fileSize,
        type: fileType,
        data: fileData
      },
      timestamp: new Date().toLocaleTimeString('vi-VN'),
      userId: socket.id
    };
    
    io.to(roomId).emit('chat-message', fileMessage);
    console.log(`File shared trong ph√≤ng ${roomId}: ${socket.username} - ${fileName}`);
  });

  // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
  socket.on('get-users-list', () => {
    const room = rooms.get(socket.roomId);
    if (room) {
      const usersList = Array.from(room.users.values());
      socket.emit('users-list', usersList);
    }
  });

  // X·ª≠ l√Ω thay ƒë·ªïi video YouTube
  socket.on('change-video', (data) => {
    const { videoId, roomId, videoTitle } = data;
    const room = rooms.get(roomId);
    
    if (room) {
      if (socket.isAdmin && room.adminId === socket.id) {
        // Admin c√≥ th·ªÉ ph√°t ngay l·∫≠p t·ª©c
        room.currentVideo = videoId;
        room.videoState = {
          isPlaying: false,
          currentTime: 0,
          lastUpdate: Date.now()
        };
        
        // Th√¥ng b√°o t·∫•t c·∫£ ng∆∞·ªùi d√πng trong ph√≤ng
        io.to(roomId).emit('video-changed', { videoId });
        
        // G·ª≠i tin nh·∫Øn h·ªá th·ªëng
        io.to(roomId).emit('chat-message', {
          username: 'H·ªá th·ªëng',
          message: `üëë Admin ${socket.username} ƒë√£ ph√°t video: ${videoTitle || 'Video m·ªõi'}`,
          timestamp: new Date().toLocaleTimeString('vi-VN'),
          isSystem: true
        });
      } else {
        // User th∆∞·ªùng th√™m v√†o queue
        const queueItem = {
          id: Date.now() + Math.random(),
          videoId: videoId,
          title: videoTitle || 'Video kh√¥ng c√≥ ti√™u ƒë·ªÅ',
          requestedBy: socket.username,
          requestedAt: new Date().toLocaleTimeString('vi-VN')
        };
        
        room.videoQueue.push(queueItem);
        
        // Th√¥ng b√°o queue ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        io.to(roomId).emit('queue-updated', room.videoQueue);
        
        // G·ª≠i tin nh·∫Øn h·ªá th·ªëng
        io.to(roomId).emit('chat-message', {
          username: 'H·ªá th·ªëng',
          message: `üìã ${socket.username} ƒë√£ th√™m video v√†o h√†ng ƒë·ª£i: ${videoTitle || 'Video m·ªõi'}`,
          timestamp: new Date().toLocaleTimeString('vi-VN'),
          isSystem: true
        });
      }
    }
  });

  // Admin ƒëi·ªÅu khi·ªÉn queue
  socket.on('admin-play-from-queue', (data) => {
    const { queueItemId, roomId } = data;
    const room = rooms.get(roomId);
    
    if (room && socket.isAdmin && room.adminId === socket.id) {
      const queueIndex = room.videoQueue.findIndex(item => item.id === queueItemId);
      if (queueIndex !== -1) {
        const queueItem = room.videoQueue[queueIndex];
        
        // Ph√°t video t·ª´ queue
        room.currentVideo = queueItem.videoId;
        room.videoState = {
          isPlaying: false,
          currentTime: 0,
          lastUpdate: Date.now()
        };
        
        // X√≥a kh·ªèi queue
        room.videoQueue.splice(queueIndex, 1);
        
        // Th√¥ng b√°o
        io.to(roomId).emit('video-changed', { videoId: queueItem.videoId });
        io.to(roomId).emit('queue-updated', room.videoQueue);
        
        io.to(roomId).emit('chat-message', {
          username: 'H·ªá th·ªëng',
          message: `üëë Admin ƒë√£ ph√°t video t·ª´ h√†ng ƒë·ª£i: ${queueItem.title} (y√™u c·∫ßu b·ªüi ${queueItem.requestedBy})`,
          timestamp: new Date().toLocaleTimeString('vi-VN'),
          isSystem: true
        });
      }
    }
  });

  // Admin x√≥a video kh·ªèi queue
  socket.on('admin-remove-from-queue', (data) => {
    const { queueItemId, roomId } = data;
    const room = rooms.get(roomId);
    
    if (room && socket.isAdmin && room.adminId === socket.id) {
      const queueIndex = room.videoQueue.findIndex(item => item.id === queueItemId);
      if (queueIndex !== -1) {
        const removedItem = room.videoQueue.splice(queueIndex, 1)[0];
        
        io.to(roomId).emit('queue-updated', room.videoQueue);
        io.to(roomId).emit('chat-message', {
          username: 'H·ªá th·ªëng',
          message: `üëë Admin ƒë√£ x√≥a video kh·ªèi h√†ng ƒë·ª£i: ${removedItem.title}`,
          timestamp: new Date().toLocaleTimeString('vi-VN'),
          isSystem: true
        });
      }
    }
  });

  // ƒê·ªìng b·ªô tr·∫°ng th√°i video (ch·ªâ admin m·ªõi c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn)
  socket.on('video-state-change', (data) => {
    const { state, roomId } = data;
    const room = rooms.get(roomId);
    
    if (room && room.isLiveMode) {
      // Ch·ªâ admin m·ªõi c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn video trong live mode
      if (socket.isAdmin && room.adminId === socket.id) {
        room.videoState = {
          ...state,
          lastUpdate: Date.now(),
          adminId: socket.id
        };
        
        // G·ª≠i tr·∫°ng th√°i ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng kh√°c v·ªõi force sync
        socket.to(roomId).emit('video-state-sync', {
          ...state,
          forceSync: true,
          adminControl: true
        });
      }
    } else {
      // Ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng - ai c≈©ng c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn
      room.videoState = {
        ...state,
        lastUpdate: Date.now()
      };
      
      socket.to(roomId).emit('video-state-sync', state);
    }
  });

  // Admin y√™u c·∫ßu force sync t·∫•t c·∫£ users
  socket.on('admin-force-sync', (data) => {
    const { roomId } = data;
    const room = rooms.get(roomId);
    
    if (room && socket.isAdmin && room.adminId === socket.id && room.isLiveMode) {
      // G·ª≠i tr·∫°ng th√°i hi·ªán t·∫°i ƒë·∫øn t·∫•t c·∫£ users
      socket.to(roomId).emit('video-state-sync', {
        ...room.videoState,
        forceSync: true,
        adminControl: true
      });
    }
  });

  // Admin b·∫≠t/t·∫Øt live mode
  socket.on('toggle-live-mode', (data) => {
    const { roomId } = data;
    const room = rooms.get(roomId);
    
    if (room && socket.isAdmin && room.adminId === socket.id) {
      room.isLiveMode = !room.isLiveMode;
      
      io.to(roomId).emit('admin-status', {
        adminId: room.adminId,
        isLiveMode: room.isLiveMode
      });
      
      const modeText = room.isLiveMode ? 'B·∫¨T' : 'T·∫ÆT';
      io.to(roomId).emit('chat-message', {
        username: 'H·ªá th·ªëng',
        message: `üëë Admin ƒë√£ ${modeText} ch·∫ø ƒë·ªô ph√°t tr·ª±c ti·∫øp`,
        timestamp: new Date().toLocaleTimeString('vi-VN'),
        isSystem: true
      });
    }
  });

  // X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi
  socket.on('disconnect', () => {
    if (socket.roomId && socket.username) {
      const room = rooms.get(socket.roomId);
      if (room) {
        // Ki·ªÉm tra n·∫øu admin r·ªùi kh·ªèi ph√≤ng
        const isAdminLeaving = socket.isAdmin && room.adminId === socket.id;
        
        room.users.delete(socket.id);
        
        if (isAdminLeaving) {
          // Admin ƒë√£ r·ªùi kh·ªèi ph√≤ng - ƒë∆∞a t·∫•t c·∫£ user v·ªÅ trang ch·ªß
          console.log(`üëë Admin ${socket.username} ƒë√£ r·ªùi kh·ªèi ph√≤ng ${socket.roomId} - chuy·ªÉn h∆∞·ªõng t·∫•t c·∫£ user v·ªÅ trang ch·ªß`);
          
          // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ user c√≤n l·∫°i trong ph√≤ng
          socket.to(socket.roomId).emit('admin-left-room', {
            message: `üëë Admin ${socket.username} ƒë√£ r·ªùi kh·ªèi ph√≤ng. B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v·ªÅ trang ch·ªß.`,
            adminUsername: socket.username
          });
          
          // Reset room state
          room.adminId = null;
          room.isLiveMode = false;
          room.currentVideo = null;
          room.videoQueue = [];
          
          // X√≥a ph√≤ng sau khi g·ª≠i th√¥ng b√°o
          setTimeout(() => {
            rooms.delete(socket.roomId);
          }, 1000);
          
        } else {
          // User th∆∞·ªùng r·ªùi kh·ªèi ph√≤ng
          socket.to(socket.roomId).emit('user-left', {
            username: socket.username,
            message: `${socket.username} ƒë√£ r·ªùi kh·ªèi ph√≤ng`
          });

          // C·∫≠p nh·∫≠t danh s√°ch v√† s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng
          const usersList = Array.from(room.users.values());
          io.to(socket.roomId).emit('users-list', usersList);
          io.to(socket.roomId).emit('user-count', room.users.size);

          // X√≥a ph√≤ng n·∫øu kh√¥ng c√≤n ai
          if (room.users.size === 0) {
            rooms.delete(socket.roomId);
          }
        }
      }
      
      // X√≥a th√¥ng tin user
      users.delete(socket.id);
    }
    
    console.log('Ng∆∞·ªùi d√πng ng·∫Øt k·∫øt n·ªëi:', socket.id);
  });
});

const PORT = process.env.PORT || 3000;

// Cho Vercel deployment
if (process.env.NODE_ENV !== 'production') {
  server.listen(PORT, () => {
    console.log(`Server ƒëang ch·∫°y tr√™n port ${PORT}`);
    console.log(`Truy c·∫≠p ·ª©ng d·ª•ng t·∫°i: http://localhost:${PORT}`);
  });
}

// Export cho Vercel
module.exports = app;
